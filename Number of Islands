class Solution {
    public int numIslands(char[][] grid) {
        if(grid.length == 0) return 0;
        int count =0;
        boolean [][] visited = new boolean[grid.length][grid[0].length];
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]=='1' && visited[i][j]==false) {
                    count++;
                    solve(grid,visited,i,j);
                }
            }
        }
        return count;
    }
    
   
    
    public void solve (char[][] grid,boolean [][] visited,int i,int j){
        
        
        visited[i][j] = true;
        
        
        if( i-1 >=0 && j >=0 && i-1<grid.length && j< grid[0].length && grid[i-1][j]=='1'&& visited[i-1][j]==false ){
            solve(grid,visited,i-1,j);
        }
        if( i >=0 && j-1 >=0 && i<grid.length && j-1< grid[0].length && grid[i][j-1]=='1' && visited[i][j-1]==false ){
            solve(grid,visited,i,j-1);
        }
        if(i+1 >=0 && j >=0 && i+1<grid.length && j< grid[0].length && grid[i+1][j]=='1' && visited[i+1][j]==false){
            solve(grid,visited,i+1,j);
        }
        if( i >=0 && j+1 >=0 && i<grid.length && j+1< grid[0].length && grid[i][j+1]=='1' && visited[i][j+1]==false){
            solve(grid,visited,i,j+1);
        }
      
    }
}
