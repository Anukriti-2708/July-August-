class Solution {
    
    class Pair{
        int key;
        int val;
        
        Pair(int key, int value){
            this.key = key;
            this.val = value;
        }
    }
    
    
    public int[] topKFrequent(int[] nums, int k) {
        
        HashMap<Integer, Integer> map = new HashMap<>();
        
        for(int n : nums){
            map.put(n, map.getOrDefault(n,0)+1);
        }
        
        PriorityQueue<Pair> pq = new PriorityQueue<>((a,b)-> Integer.compare(a.val, b.val));
        
        for(int key : map.keySet()){
            if(pq.size()<k){
                pq.add(new Pair(key, map.get(key)));
            }
            else{
                Pair temp = pq.peek();
                if(map.get(key)>temp.val){
                    pq.remove();
                    pq.add(new Pair(key, map.get(key)));
                    }
            }
        }
         
        int[] result = new int[k];
        for(int i=0;i<k;i++){
            result[i] = pq.poll().key;
        }
        
        return result;
        
    }
}

 
