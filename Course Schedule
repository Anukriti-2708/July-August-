class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        
       HashMap<Integer, List<Integer>> map = new HashMap();
        int[] inDegree = new int[numCourses];
        
        for(int i=0;i<prerequisites.length;i++){
            inDegree[prerequisites[i][0]]++;
            if(!map.containsKey(prerequisites[i][1])){
                ArrayList<Integer> list = new ArrayList<>();
                list.add(prerequisites[i][0]);
                map.put(prerequisites[i][1], list);
            }
            else{ map.get(prerequisites[i][1]).add(prerequisites[i][0]);}
        }
        
        Queue<Integer> queue = new LinkedList<>();
        for(int i=0; i< inDegree.length;i++){
            if(inDegree[i]==0) queue.add(i);
        }
        
        while(!queue.isEmpty()){
            int k = queue.poll();
            List<Integer>list = map.get(k);
            for(int x=0; list!=null && x< list.size() ;x++){
               inDegree[list.get(x)]--;
               if(inDegree[list.get(x)] == 0) { queue.add(list.get(x));
           }
            }
        }
        
        for(int i=0;i<inDegree.length;i++){
            if(inDegree[i]!=0) return false;
        }
        
        return true;
     }

}
                   
