class Solution {
    public int coinChange(int[] coins, int amount) {
        int[][] dp = new int[coins.length][amount+1];
        for(int row[]: dp)
        Arrays.fill(row,-1);
        
        
        int ans =  solve(coins, amount, dp, coins.length-1);
       if(ans >= (int)Math.pow(10,9)) return -1;
        return ans;
    }
    
    public int solve(int[] coins, int amount, int[][] dp , int idx){
        
        if(idx == 0) {
        if (amount%coins[idx]==0){
            return amount/coins[idx];
        }
            else{
               return (int)Math.pow(10,9);
            }
        }
        
        if(dp[idx][amount]!= -1) return dp[idx][amount];
        
        int notPick = 0+ solve(coins,amount,dp,idx-1);
        int pick = (int)Math.pow(10,9);
        
        if(coins[idx]<=amount){
            pick = 1+ solve(coins,amount-coins[idx],dp,idx);
        }
         
        return dp[idx][amount] = Math.min(notPick ,pick);

    }
}
